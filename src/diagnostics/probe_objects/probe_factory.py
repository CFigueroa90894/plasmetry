""" G3 - Plasma Devs
Layer 2 - Diagnostics - Probe Factory
    The Probe Factory class provides a simplified call to instantiate probes, abstracting away
    the complexity of selecting equations, instantiating hardware components, and selecting config
    values for specific probe object implementations. 

author: figueroa_90894@students.pupr.edu
status: DONE

classes:
    ProbeFactory - supports SLP, DLP, HEA, IEA, TLP-C, and TLP-V probe object instantiation.
            SLP/DLP - LangmuirProbe class
            HEA/IEA - EnergyAnalyzer class
            TLP-C   - TripleLangCurrent class
            TLP-V   - TripleLangVoltage class
"""

# ----- BUILT-IN IMPORTS ----- #
import sys
import os
from queue import Queue

# ----- PATH HAMMER v2.4 ----- resolve absolute imports ----- #
if __name__ == "__main__":  # execute snippet if current script was run directly 
    num_dir = 2             # how many parent folders to reach /plasmetry/src

    # absolute path to plasmetry/src
    src_abs = os.path.abspath(os.path.dirname(__file__) + num_dir*'/..')
    print(f"Path Hammer: {src_abs}")
    split = src_abs.split('\\')     # separate path into folders for validation
    assert split[-2] == 'plasmetry' and split[-1] == 'src'  # validate correct top folder
    
    # get subdirs, exclude __pycache__
    targets = [x[0] for x in os.walk(src_abs) if x[0].split('\\')[-1]!='__pycache__']
    for dir in targets: sys.path.append(dir)    # add all subdirectories to python path
    print(f"Path Hammer: subdirectories appended to python path")
# ----- END PATH HAMMER ----- #


# ----- LOCAL IMPORTS ----- #
from probe_enum import PRB

# CONCRETE PROBE OBJECTS
from Langmuir_Probe import LangmuirProbe
from Triple_Lang_Voltage import TripleLangVoltage
from Triple_Lang_Current import TripleLangCurrent
from Energy_Analyzer import EnergyAnalyzer


class ProbeFactory:
    """The ProbeFactory abstracts away the details and complexity of instantiating probe objects.
    
    The six supported probe types have different physical makeups, but for the software some are
    operated the same way, some share components, and some even share equations. To reuse code and
    avoid duplicating objects, the Probe Factory assembles the six probe types using four classes.
    The arguments passed to each of the four classes' constructors consist of equations obtained
    from the calculations factory, instantiated objects from the hardware factory, and configuration
    values obtained from system and user settings. Arguments for the calculations and hardware
    factories are also obtained from said settings.

    Attributes:
        + config - stores user settings
        + system - stores system settings
        + status_flags - state indicators for probes
        + command_flags - action triggers for probes
        + hardware_factory - generates probe subcomponents
        + COMP - IDs for supported probe subcomponents
        + calculations_factory - generates lists of data processing functions for each probe

    Methods:
        + __init__() - Constructor for the ProbeFactory
        + make() - instantiates a probe object
        - __pack_general() - returns control objects required by all probes
        - __pack_base_probe() - returns settings and subcomponents required by all probes
        - __pack_sweeper() - returns settings and subcomponents for SweeperProbe subclasses
        - __pack_base_tlp() - returns settings and subcomponents for BaseTLP subclasses
        # _pack_lp() - returns settings and subcomponents for LangmuirProbe objects
        # _pack_ea() - returns settings and subcomponents for EnergyAnalyzer objects
        # _pack_tlpc() - returns settings and subcomponents for TripleLangCurrent objects
        # _pack_tlpv() - returns settings and subcomponents for TripleLangVoltage objects
        - __make_component() - returns probe subcomponents generated by the hardware factory
        - __make_volt_sens() - returns a VoltageSensor object
        - __make_hv_amp() - returns a HighVoltAmp object
        - __make_sweeper() - returns a VoltageSweeper object
        - __make_relays() - returns a RelaySet object
    """
    def __init__(self,
                 status_flags,
                 command_flags,
                 hardware_factory,
                 calculations_factory,
                 ):
        """Instantiates a ProbeFactory object, saving control objects and subfactories for reuse.
        
        Arguments:
            status_flags: StatusFlags - state indicators
            command_flags: CommandFlags - action triggers
            hardware_factory - an instantiated component factory to generate probe subcomponents
            calculations_factory - callable object, generates lists of data processing functions
        """
        # Save argument references
        self.config = None
        self.system = None
        self.status_flags = status_flags
        self.command_flags = command_flags
        self.hardware_factory = hardware_factory
        self.COMP = hardware_factory.ID
        self.calculations_factory = calculations_factory

    def make(self, probe_type: PRB, config_ref:dict, sys_ref:dict, probe_name="PROBE"):
        """Returns an instantiated probe object.
        
        Arguments:
            probe_type - defines what probe object will be instantiated, and how it is assembled
            config_ref - user settings for the desired probe
            sys_ref - system settings for the desired probe
            probe_name - label for the probe's text output
                default: "PROBE"
        """
        self.config = config_ref
        self.system = sys_ref
        
        # Package probe specific config by ID
        match probe_type:
            # Single Langmuir Probe
            case PRB.SLP:
                Probe_Class = LangmuirProbe
                probe_args = self._pack_lp()
            
            # Double Langmuir Probe
            case PRB.DLP:
                Probe_Class = LangmuirProbe
                probe_args = self._pack_lp()
            
            # Hyperbolic Energy Analyzer
            case PRB.HEA:
                Probe_Class = EnergyAnalyzer
                probe_args = self._pack_ea()
            
            # Ion Energy Analyzer
            case PRB.IEA:
                Probe_Class = EnergyAnalyzer
                probe_args = self._pack_ea()
            
            # Triple Langmuir Probe - Voltage Mode
            case PRB.TLV:
                Probe_Class = TripleLangVoltage
                probe_args = self._pack_tlpv()
            
            # Triple Langmuir Probe - Current Mode
            case PRB.TLC:
                Probe_Class = TripleLangCurrent
                probe_args = self._pack_tlpc()
            
            # Unknown Probe
            case _:
                raise ValueError(f"Unknown probe type: {probe_type}")
        
        # pack general config
        probe_args["probe_id"] = probe_type
        probe_args["equations"] = self.calculations_factory(probe_type, self.config)
        probe_args["name"] = probe_name
        probe_args["text_out"] = config_ref["text_out"]
        
        # Initialize and return Probe Object using packed arguments.
        return Probe_Class(**probe_args)
    

    # ----- PROBE ARGUMENT PACKAGING ----- #
    
    # GENERAL CONFIG ARTIFACTS
    def __pack_general(self) -> dict:
        """Returns a dictionary packed with arguments for all probe objects, including settings not
        directly required the probes objects, status and command flags, and a freshly instantiated
        data buffer to obtain the probe acquired voltage samples.
        """
        args = {
            "sys_ref": self.system,
            "config_ref": self.config,
            "status_flags": self.status_flags,
            "command_flags": self.command_flags,
            "data_buff": Queue()     # new queue every time a probe is instantiated
        }
        return args

    # BASE PROBE CONFIG (abstract)
    def __pack_base_probe(self):
        """Returns a dictionary packed with arguments required by all probe subclasses, including
        newly generated relay objects, data sampling parameters, and arguments returned by the
        __pack_general() method."""

        # make relay subcomponent
        relays = self.__make_relays(
            addresses=self.system["relay_addresses"]
        )
        # pack probe args
        probe_args = {
            "sampling_rate": self.config["sampling_rate"],
            "relay_set": relays,
            "num_samples": self.config["num_samples"],
            **self.__pack_general()     # inherit general args
        }
        return probe_args
    
    # SWEEPER PROBE CONFIG (abstract)
    def __pack_sweeper(self):
        """Returns a dictionary packed with arguments required by SweeperProbe subclasses, including
        ranges for the DAC (digital to analog converter) and sweeper amplifier outputs, instantiated
        VoltageSweeper and VoltageSensor hardware objects, value of the shunt resistor to calculate
        current measurements from obtained voltage samples, and the arguments returned by the
        __pack_base_probe() method.

        """
        base_probe_args = self.__pack_base_probe()
        # shared argument
        dac_range = {
            "min": self.config["dac_min"],
            "max": self.config["dac_max"]
        }
        # make sweeper subcomponent
        sweep_amp_range = {
            "min": self.config["sweep_amp_min"],
            "max": self.config["sweep_amp_max"]
        }
        sweeper = self.__make_sweeper(
            address=self.system["sweeper_address"],
            num_samples=base_probe_args["num_samples"],
            dac_range=dac_range,
            amp_range=sweep_amp_range,
            sweep_min=self.config["sweep_min"],
            sweep_max=self.config["sweep_max"]
        )
        # make collector subcomponent
        collector = self.__make_volt_sens(
            address=self.system["collector_address"],
            gain=self.config["collector_gain"]
        )
        # pack probe args
        args = {
            "sweeper": sweeper,
            "collector": collector,
            "sweeper_shunt": self.config["sweeper_shunt"],
            **base_probe_args  # inherit base probe args
        }
        return args
    
    # BASE TLP CONFIG (abstract)
    def __pack_base_tlp(self):
        """Returns a dictionary packed with arguments required by BaseTLP subclasses, including
        ranges for DAC and biasing amplifier outputs, HighVoltAmp objects, VoltageSensor objects,
        and arguments returns by the __pack_base_probe() method.
        
        """
        # make upper probe bias amp
        dac_range = {
            "min": self.config["dac_min"],
            "max": self.config["dac_max"]
        }
        up_amp_range = {
            "min": self.config["up_amp_min"],
            "max": self.config["up_amp_max"]
        }
        up_amp = self.__make_hv_amp(
            address=self.system["up_amp_address"],
            dac_range=dac_range,
            amp_range=up_amp_range
        )
        # make upper probe collector
        up_collector = self.__make_volt_sens(
            address=self.system["up_collector_address"],
            gain=self.config["up_collector_gain"]
        )
        # pack probe args
        args = {
            "up_amp_bias": self.config["up_amp_bias"],
            "up_amp": up_amp,
            "up_collector": up_collector,
            "up_shunt": self.config["up_shunt"],
            **self.__pack_base_probe()  # inherit base probe args
        }
        return args

    # LANGMUIR PROBE CONFIG (concrete)
    def _pack_lp(self) -> dict:
        """Returns a dictionary packed with arguments for SLP and DLP probe objects instantiated
        from the LangmuirProbe class; only returns arguments from the __pack_sweeper() method.
        
        """
        args = {
            **self.__pack_sweeper()     # inherit sweeper args
        }
        return args
    
    # ENERGY ANALYZER CONFIG (concrete)
    def _pack_ea(self) -> dict:
        """Returns a dictionary packed with arguments for HEA and IEA probe objects instantiated
        from thr EnergyAnalyzer class, including ranges DAC and amplifier outputs, two HighVoltAmp
        objects, and arguments returns by the __pack_sweeper() method. 

        """
        
        # pack DAC range arguments (shared for all amps)
        dac_range = {
            "min": self.config["dac_min"],
            "max": self.config["dac_max"]
        }
        # make rejector bias amp
        rejector_range = {
            "min": self.config["rejector_min"],
            "max": self.config["rejector_max"]
        }
        rejector_amp = self.__make_hv_amp(
            address=self.system["rejector_address"],
            dac_range=dac_range,
            amp_range=rejector_range
        )
        # make collector bias amp
        collector_bias_range = {
            "min": self.config["collector_bias_min"],
            "max": self.config["collector_bias_max"]
        }
        collector_amp = self.__make_hv_amp(
            address=self.system["collector_bias_address"],
            dac_range=dac_range,
            amp_range=collector_bias_range
        )
        # pack probe args
        args = {
            "rejector_bias": self.config["rejector_bias"],
            "rejector_amp": rejector_amp,
            "collector_bias": self.config["collector_bias"],
            "collector_amp": collector_amp,
            **self.__pack_sweeper()     # inherit sweeper args 
        }
        return args

    # TRIPLE LANGMUIR PROBE - CURRENT MODE CONFIG (concrete)
    def _pack_tlpc(self) -> dict:
        """Returns a dictionary packed with arguments for a TLP-C object instantiated from the
        TripleLangCurrent class, including ranges for the DAC and amplifier outputs, a HighVoltAmp
        object, a VoltageSensor object, and arguments returned by the __pack_base_tlp() method.
        
        """
        # pack DAC range arguments (shared for all amps)
        dac_range = {
            "min": self.config["dac_min"],
            "max": self.config["dac_max"]
        }
        # make down probe bias amp
        down_amp_range = {
            "min": self.config["down_amp_min"],
            "max": self.config["down_amp_max"]
        }
        down_amp = self.__make_hv_amp(
            address=self.system["down_amp_address"],
            dac_range=dac_range,
            amp_range=down_amp_range
        )
        # make down probe collector
        down_collector = self.__make_volt_sens(
            address=self.system["down_collector_address"],
            gain=self.config["down_collector_gain"]
        )
        # pack probe args
        args = {
            "down_amp_bias": self.config["down_amp_bias"],
            "down_amp": down_amp,
            "down_collector": down_collector,
            "down_shunt": self.config["down_shunt"],
            **self.__pack_base_tlp()    # inherit base tlp args
        }
        return args

    # TRIPLE LANGMUIR PROBE - VOLTAGE MODE CONFIG (concrete)
    def _pack_tlpv(self) -> dict:
        """Returns a dictionary packed with arguments for a TLP-V object instantiated from the
        TripleLangVoltage class, including a VoltageSensor object, and arguments returned by the 
        __pack_base_tlp() method.
        
        """
        # make floating probe collector
        float_collector = self.__make_volt_sens(
            address=self.system["float_collector_address"],
            gain=self.config["float_collector_gain"]
        )
        args = {
            "float_collector": float_collector,
            **self.__pack_base_tlp()    # inherit base tlp args
        }
        return args
    
    # ----- SUBCOMPONENT INSTANTIATION ----- #
    
    # Generic component factory call
    def __make_component(self, args):
        """Returns an instantiated hardware component object generated by the component factory."""
        return self.hardware_factory.make(**args)

    # VoltageSensor
    def __make_volt_sens(self, address, gain):
        """Returns an instantiated VoltageSensor object generated by the component factory."""
        args = {
            "type": self.COMP.VSENS,
            "address": address,
            "gain": gain
        }
        return self.__make_component(args)
        
    # HighVoltAmp
    def __make_hv_amp(self, address, dac_range, amp_range):
        """Returns an instantiated HighVoltAmp object generated by the component factory."""
        args = {
            "type": self.COMP.HVAMP,
            "address": address,
            "dac_range": dac_range,
            "amp_range": amp_range
        }
        return self.__make_component(args)

    # VoltageSweeper
    def __make_sweeper(self, address, dac_range, amp_range, num_samples, sweep_min, sweep_max):
        """Returns an instantiated VoltageSweeper object generated by the component factory."""
        args = {
            "type": self.COMP.SWEEP,
            "address": address,
            "dac_range": dac_range,
            "amp_range": amp_range,
            "num_samples": num_samples,
            "sweep_min": sweep_min,
            "sweep_max": sweep_max
        }
        return self.__make_component(args)

    # RelaySet
    def __make_relays(self, addresses):
        """Returns an instantiated RelaySet object generated by the component factory."""
        args = {
            "type": self.COMP.RLSET,
            "address": addresses
        }
        return self.__make_component(args)


